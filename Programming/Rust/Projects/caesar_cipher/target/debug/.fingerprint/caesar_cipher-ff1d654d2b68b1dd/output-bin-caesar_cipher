{"message":"cannot find value `real_offset` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":3160,"byte_end":3171,"line_start":94,"line_end":94,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"                let new_index = index + (real_offset as usize);","highlight_start":42,"highlight_end":53}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `real_offset` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:94:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mndex + (real_offset as usize);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"`break` with value from a `for` loop","code":{"code":"E0571","explanation":"A `break` statement with an argument appeared in a non-`loop` loop.\n\nExample of erroneous code:\n\n```compile_fail,E0571\n# let mut i = 1;\n# fn satisfied(n: usize) -> bool { n % 23 == 0 }\nlet result = while true {\n    if satisfied(i) {\n        break 2 * i; // error: `break` with value from a `while` loop\n    }\n    i += 1;\n};\n```\n\nThe `break` statement can take an argument (which will be the value of the loop\nexpression if the `break` statement is executed) in `loop` loops, but not\n`for`, `while`, or `while let` loops.\n\nMake sure `break value;` statements only occur in `loop` loops:\n\n```\n# let mut i = 1;\n# fn satisfied(n: usize) -> bool { n % 23 == 0 }\nlet result = loop { // This is now a \"loop\" loop.\n    if satisfied(i) {\n        break 2 * i; // ok!\n    }\n    i += 1;\n};\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2622,"byte_end":2639,"line_start":81,"line_end":81,"column_start":9,"column_end":26,"is_primary":true,"text":[{"text":"        break real_offset;","highlight_start":9,"highlight_end":26}],"label":"can only break with a value inside `loop` or breakable block","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":2097,"byte_end":2130,"line_start":67,"line_end":67,"column_start":5,"column_end":38,"is_primary":false,"text":[{"text":"    for character in encoding.chars() {","highlight_start":5,"highlight_end":38}],"label":"you can't `break` with a value in a `for` loop","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":2097,"byte_end":2646,"line_start":67,"line_end":82,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    for character in encoding.chars() {","highlight_start":5,"highlight_end":40},{"text":"        println!(\"{}\", character);","highlight_start":1,"highlight_end":35},{"text":"        let mut real_offset: i32 = if character.to_ascii_uppercase() == 'D' {","highlight_start":1,"highlight_end":78},{"text":"            26 - message_offset","highlight_start":1,"highlight_end":32},{"text":"//            println!(\"Decrypting\");","highlight_start":1,"highlight_end":38},{"text":"//            break;","highlight_start":1,"highlight_end":21},{"text":"        } else if character.to_ascii_uppercase() == 'E' {","highlight_start":1,"highlight_end":58},{"text":"            message_offset","highlight_start":1,"highlight_end":27},{"text":"//            println!(\"Encrypting\");","highlight_start":1,"highlight_end":38},{"text":"//            break;","highlight_start":1,"highlight_end":21},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            println!(\"Please try again and enter 'Encrypt' or 'Decrypt'\");","highlight_start":1,"highlight_end":75},{"text":"            process::exit(0);","highlight_start":1,"highlight_end":30},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"        break real_offset;","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"use `break` on its own without a value inside this `for` loop","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":2622,"byte_end":2639,"line_start":81,"line_end":81,"column_start":9,"column_end":26,"is_primary":true,"text":[{"text":"        break real_offset;","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":"break","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0571]\u001b[0m\u001b[0m\u001b[1m: `break` with value from a `for` loop\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:81:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for character in encoding.chars() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12myou can't `break` with a value in a `for` loop\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        break real_offset;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan only break with a value inside `loop` or breakable block\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `break` on its own without a value inside this `for` loop\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mbreak\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0425, E0571.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0425, E0571.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0425`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0425`.\u001b[0m\n"}
