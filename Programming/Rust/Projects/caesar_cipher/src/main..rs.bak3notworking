// written by Christopher Iwen circa 2024
use std::io;
use std::process;

//To Do:
//1. create function for Encrypt/Decrypt function
//2. have the offset value changed if Decrypt is selected


//===========start program===========
fn main() {



//===========declare variables===========
    let mut message_offset = String::new();
//    let mut real_offset: i32 = String::new();
    let mut original_message = String::new();
    let mut hidden_message = String::new();
    let mut encoding = String::new();
    //array of char requires single quotes '
    let alpha_array: [char; 26] = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];



//===========ask for input message===========
    println!("What message would you like to use?");
    // create new string variable from the input message
//    let mut original_message = String::new();

    // get input from user
    io::stdin()
        .read_line(&mut original_message)
        .expect("Failed to read line");

    // create variable for the length of the message
//    let message_length = original_message.chars().count()-1;



//===========ask for encoding offset===========
    println!("What offset would you like to use between 1 - 25?\n Cannot use Zero '0', because that would not encode anything.");

    // get input from user
    io::stdin()
        .read_line(&mut message_offset)
        .expect("Failed to read line");

    // convert offset to unsigned 32 bit integer
    // trim any white space before or after
    // return error if not a number
    let message_offset: i32 = message_offset.trim().parse().expect("Please type a number!");
    // add check to make sure value is between 1 - 26



//===========ask if the message will be encrypted or decrypted===========

    println!("Would you like to (E)crypt or (D)ecrypt the message?");
    // get input from user
    io::stdin()
        .read_line(&mut encoding)
        .expect("Failed to read line");
    // pull the first char, make upper case, and check it
//    let mut coding: &str = encoding.trim().expect("Please type Encrypt or Decrypt.");
    println!("{}", encoding);

    for character in encoding.chars() {
        println!("{}", character);



        let real_offset: i32 = if character.to_ascii_uppercase() == 'D' {
            26 - message_offset;
            println!("Decrypting");
            break;
        } else if character.to_ascii_uppercase() == 'E' {
            message_offset;
            println!("Encrypting");
            break;
        } else {
            println!("Please try again and enter 'Encrypt' or 'Decrypt'");
            process::exit(0);
        };


    }


//===========loop through each character in original message===========
    for input_character in original_message.chars() {

//===========loop through each index===========
        for index in 0..26 {
            //check each character versus the array
            if alpha_array[index] == input_character.to_ascii_uppercase() {
                //if array character is equal to input character
                //add offset to index and return character at that index
                let new_index = index + (real_offset as usize);
                if new_index > 26 {
                    let new_index = new_index - 26; 
                    let new_str = alpha_array[new_index].to_string();
                    hidden_message.push_str(&new_str);
                    //exit loop to save time. 
                    break;
                } //end if new_index
                //next few lines should be a function cause it gets used more than once
                let new_str = alpha_array[new_index].to_string();
                hidden_message.push_str(&new_str);
                //exit loop to save time. 
                break;
            } //end if alpha_array[index]
        } //end for index
    } //end for input_character




//===========display hidden message===========
    println!("{}", hidden_message)






}